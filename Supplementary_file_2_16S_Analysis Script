# Loading all required libraries
library(dada2); packageVersion("dada2")
library(ggplot2)
library(phyloseq)
library(Biostrings)
library(phangorn)
library(tibble) 
library(tidyr)  
library(ShortRead)
library(dbplyr)
library(DECIPHER)   
library(ape)   
library(DESeq2)   
library(ggplot2)    
library(phyloseq)    
library(plotly)  
library(vegan)      
library(tidyverse)   
library(adespatial)  
library(devtools)    
library(qiime2R)  
library(MicrobeR)  
library(microbiome)  
library(microbiomeSeq)  
library("pander")  
library(ranacapa)  
library(grid)  
library(gridExtra)   
library(png)  
library("ggdendro")  
library(ggpubr)  
library(RColorBrewer)  
library(microbiomeutilities)  
library(dplyr)
library(microbiome)
library(ggdendro)
library(dendextend)
library(reshape)
library(microViz)
library(lme4)
library(ggpubr)
library(ALDEx2)

#
fnFs <- sort(list.files(path, pattern="_515f.forward.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_515f.reverse.fastq", full.names = TRUE))

#
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 3)

#
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])

#
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))

#
names(filtFs) <- sample.names
names(filtRs) <- sample.names

#
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(220,200),
              maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
              compress=TRUE, multithread=FALSE) 
 
 #
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE) 

#
plotErrors(errF, nominalQ=TRUE)
plotErrors(errR, nominalQ=TRUE)

#
dadaFs <- dada(filtFs, err=errF, multithread=TRUE)
dadaRs <- dada(filtRs, err=errR, multithread=TRUE)

#
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)

#
seqtab <- makeSequenceTable(mergers)

#
table(nchar(getSequences(seqtab)))

#
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)

#
sum(seqtab.nochim)/sum(seqtab)

#
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
write.csv(track,"Sequencing Statistics - 16S.csv")

#
taxa <- assignTaxonomy(seqtab.nochim, "/nesi/project/landcare02543/data/Ohwofasa/ohwofasaa/ohwofasa/Wine_Data_Run_Repeated 02_May_2022/16S_Data_2021/Tax/silva_nr_v132_train_set.fa.gz")
taxa <- addSpecies(taxa, "/nesi/project/landcare02543/data/Ohwofasa/ohwofasaa/ohwofasa/Wine_Data_Run_Repeated 02_May_2022/16S_Data_2021/Tax/silva_species_assignment_v138.1.fa.gz")
taxa.print <- taxa 

#
sequences<- getSequences(seqtab.nochim)
names(sequences)<-sequences

#
alignment <- AlignSeqs(DNAStringSet(sequences), anchor=NA)

#
phang.align <- phyDat(as(alignment, "matrix"), type="DNA")

#
dm <- dist.ml(phang.align)
treeNJ <- NJ(dm) 
fit<- pml(treeNJ, data = phang.align)
fitGTR <- update(fit, k=4, inv=0.2)
fitGTR <- optim.pml(fitGTR, model = "GTR", optInv = TRUE, optGamma = TRUE,
                    rearrangement = "stochastic", control = pml.control(trace = 0))
 
# Metadata
map <- import_qiime_sample_data("UclustCombinedMicrobiomeData.tsv")

# Creating  Phyloseq object
ps <- phyloseq(otu_table(seqtab.nochim_final, taxa_are_rows = FALSE),
              tax_table(taxa.PRINT),phy_tree(fitGTR$tree))

# Merge ps with map
ps <- merge_phyloseq(ps, map)
ps

# Taxa cleaning 
ps1 <- ps %>%
  subset_taxa(
    Kingdom == "Bacteria" &
    Family  != "Mitochondria" &
    Class   != "Chloroplast" &
    Phylum != "Cyanobacteria" &
    Phylum != "Chloroplast"  
  )
  
#Confirm Taxa removal
get_taxa_unique(ps1, "Kingdom")
get_taxa_unique(ps1, "Phylum")

# Reassign back to ps object
ps<- ps1

#
set.seed(711)
level_order <- c('Lag', 'Exp', 'S1','S2')

DATA.2 <- ps  

df = as.data.frame(sample_data(DATA.2))
#df$site = as.numeric(as.character(df$site))
df$LibrarySize = sample_sums(DATA.2)
df = df[order(df$LibrarySize),]
df$Index = seq(nrow(df))

#
ggplot(data=df, aes(x=Index, y=LibrarySize, colour= Location))+
  geom_point()+
  facet_wrap(~ factor(Ferment_Stage, level = level_order)) +
  scale_y_continuous(trans='sqrt')
  
#
physeq.gen <- aggregate_taxa(ps,"Genus")
dom.tax <- dominant_taxa(ps,level = "Genus", group="Location")
head(dom.tax$dominant_overview)

#Get count of phyla
table(phyloseq::tax_table(ps)[, "Phylum"])

#Get count of Genus
table(phyloseq::tax_table(ps)[, "Genus"])

# Compute prevalence of each feature, store as data.frame 
prevdf <- apply(X = otu_table(ps), 
               MARGIN = ifelse(taxa_are_rows(ps), yes = 1, no = 2), 
               FUN = function(x){sum(x > 0)})

# Add taxonomy and total read counts to this data.frame 
prevdf <- data.frame(Prevalence = prevdf,
                    TotalAbundance = taxa_sums(ps),
                    tax_table(ps))
                    
## Compute the total and average prevalences of the features in each phylum.
plyr::ddply(prevdf, "Phylum", function(df1){cbind(mean(df1$Prevalence),sum(df1$Prevalence))})

# Giving our seq headers more manageable names (ASV_1, ASV_2...)
asv_seqs <- colnames(seqtab.nochim_final)
asv_headers <- vector(dim(seqtab.nochim_final)[2], mode="character")

for (i in 1:dim(seqtab.nochim_final)[2]) {
  asv_headers[i] <- paste(">ASV", i, sep="_")
}

# Making and writing out a fasta of our final ASV seqs:
    
asv_fasta <- c(rbind(asv_headers, asv_seqs))
write(asv_fasta, "ASVs.fa")

# count table:
asv_tab <- t(seqtab.nochim_final)
row.names(asv_tab) <- sub(">", "", asv_headers)
write.table(asv_tab, "ASVs_counts.tsv", sep="\t", quote=F, col.names=NA)

##  Giving taxonomy table corresponding names as above (ASV_1, ASV_2...)

row.names(taxa.PRINT) <- sub(">", "", asv_headers)

write.table(taxa.PRINT, "ASVs_named_correctly.tsv", sep="\t", quote=F, col.names=NA)

#
tax_tab <- as.matrix(read.table("ASVs_named_correctly.tsv", header=T,
           row.names=1, check.names=F, sep="\t"))

sample_info_tab <- read.table("UclustCombinedMicrobiomeData.tsv", header=F, row.names=1,
                   check.names=F, sep="\t")

sample_info_tab$Ferment_Stage<- as.character(sample_info_tab$V3)

sample_info_tab$Location <- as.character(sample_info_tab$V4)

sample_info_tab$color<- as.character(sample_info_tab$V5)

count_tab <- read.table("ASVs_counts.tsv", header=T, row.names=1,
             check.names=F, sep="\t")

#Normalizing for sampling depth

deseq_counts <- DESeqDataSetFromMatrix(count_tab, colData = sample_info_tab, design = ~Location) 
deseq_counts_vst <- varianceStabilizingTransformation(deseq_counts)
vst_trans_count_tab <- assay(deseq_counts_vst)

#Rarefaction curves
rarecurve(t(count_tab), step=100, col=sample_info_tab$color, lwd=2, ylab="ASVs", label=F)
abline(v=(min(rowSums(t(count_tab))))) #Adding a vertical line at the fewest seqs in any sample

# Abundance value transformation. 
ps_rel_abund <- phyloseq::transform_sample_counts(ps, function(x){x / sum(x)})

#Plot top 6 genus

mycols <- c("green", "red")

ps.genus <- aggregate_taxa(ps_rel_abund, "Genus")
top_six <- top_taxa(ps.genus, 6)

top_genera <- plot_listed_taxa(ps.genus, top_six, 
                 group= "Location",
                 group.order = c("Vineyard","Winery"),
                 group.colors = mycols,
                 add.violin = F,
                 dot.opacity = 0.25,
                 box.opacity = 0.25,
                 panel.arrange= "wrap",pan)

comps <- make_pairs(sample_data(ps.genus)$Location)   ## Add p_value      
p <- top_genera + stat_compare_means(
      comparisons = comps,
      label = "p.format", vjust = 0.19)

print(p + ylab("Relative abundance") + scale_y_continuous(labels = scales::percent))

#Agglomerate to phylum-level and rename

ps_phylum <- phyloseq::tax_glom(ps_rel_abund, "Phylum")
phyloseq::taxa_names(ps_phylum) <- phyloseq::tax_table(ps_phylum)[, "Phylum"]
phyloseq::otu_table(ps_phylum)[1:4, 1:4]

#Subset ps object to any specific Family of genus of interest e.g Acetobacteraceae

ps_aceto_fam <- subset_taxa(ps_rel_abund, Family == "Acetobacteraceae")

ps_ace_fam <- phyloseq::tax_glom(ps_aceto_fam , "Family") #Agglomerate to phylum-level and rename
phyloseq::taxa_names(ps_ace_fam) <- phyloseq::tax_table(ps_ace_fam)[, "Family"]
head(phyloseq::otu_table(ps_ace_fam))

level_order <- c('Lag','Exp','S1','S2')

ace_mp<- phyloseq::psmelt(ps_ace_fam) %>%     #Melt and plot
ggplot(data = ., aes(x = Location, y = Abundance)) +
  geom_boxplot(outlier.shape  = NA) +
  geom_jitter(aes(color = OTU), height = 0, width = .2) +
  labs(x = "", y = "Abundance\n") +
  facet_wrap(OTU ~ factor(Ferment_Stage,level = level_order), scales = "free")

comps <- make_pairs(sample_data(ps_Met)$Location) ##Add p.value
p <- ace_mp + stat_compare_means(
      comparisons = comps,
      label = "p.format", vjust = 0.19)

p + scale_y_continuous(labels = scales::percent) + ylab("Relative abundance") + theme(panel.background = element_rect(fill = 'white', colour = 'black'))

 
#Subsetting by environmental system to Genus Level. 

ps_genus_location <- phyloseq::tax_glom(ps_rel_abund, "Genus")
phyloseq::taxa_names(ps_genus_location) <- phyloseq::tax_table(ps_genus_location)[, "Genus"]
phyloseq::otu_table(ps_genus_location)[1:4, 1:4]

# To make winery relative abundance plot using core fungi microbiome 
Winery_gen <- phyloseq::subset_samples(ps_genus_location, Location == "Winery") #Subset groups to winery environmental sysytem/location

ps_gen_rel_winery <- microbiome::transform(Winery_gen, "compositional")

ps_gen_rel_winery <- Winery_gen %>%
  aggregate_rare(level = "Genus", detection = 0.0001, prevalence = 70/100) %>% 
  microbiome::transform(transform = "compositional")

#To see core Bacterial Microbiome associated with the Winery system
core_members(ps_gen_rel_winery, detection = 0.0001, prevalence = 70/100)

#Palette colors
cb_palette <- c("#999999", "#E69F00", "#FF0000", "#87C1FF",
                "#0072B2","#F0E442","#fe019a","#D55E00","#000000","#CCFFFF","#CCCCFF")
                
###Actual plot
basic <- plot_composition(ps_gen_rel_winery, sample.sort = c("OPF7D1b", "OPF7D2b", "OPF7D3b", "OPF7D4b", 
                                                      "OPF7D5b", "OPF7D6b", "OPF7D7b","OPF7D8b","OPF7D9b","OPF7D10b","OPF7D11b","OPF7D12b","OPF7D13b","OPF7D14b","OPF7D15b",
                                                      "OPF7D16b","OPF7D17b","OPF7D18b","OPF7D19b","OPF7D20b","OPF7D21b","OPF7D22b","OPF7D23b","OPF7D24b","OPF7D25b","OPF7D26b",
                                                      "OPF7D27b","OPF7D28b","OPF7D28APb")) + theme(legend.position = "bottom") + scale_fill_manual("Genus", values = cb_palette) 
                                                      + scale_color_viridis(option = "D") + theme_bw() + theme(axis.text.x = element_blank()) + ggtitle("(B)") + theme(legend.title = element_text(size = 25))

publication_style<- basic + scale_y_continuous(expand=c(0,0)) +
labs(x = "\nDays from harvest",
       y = "Relative abundance")

publication_style        

# To make vineyard relative abundance plot 
  
#Subset groups to vineyard environmental sysytem/location
Vineyard_gen <- phyloseq::subset_samples(ps_genus_location, Location == "Vineyard") #Subset groups to vineyard environmental sysytem

ps_gen_rel_vine <- microbiome::transform(Vineyard_gen, "compositional")

ps_gen_rel_vine <- Vineyard_gen %>%
  aggregate_rare(level = "Genus", detection = 0.0001, prevalence = 70/100) %>% 
  microbiome::transform(transform = "compositional")
  
# To see core bacterial Microbiome associated with the Vineyard system
core_members(ps_gen_rel_vine, detection = 0.0001, prevalence = 70/100)
 
cb_palette1 <- c("#999999", "#E69F00","#FF0000", "#0072B2",
                "#F0E442","#9933FF","#D55E00","#000000","#CCFFFF","#CCCCFF")   ##Creating a palette with many colors

# Actual plot 
basic <- plot_composition(ps_gen_rel_vine, sample.sort = c("OPF1D1b", "OPF1D2b", "OPF1D3b", "OPF1D4b", "OPF1D5b", "OPF1D6b", "OPF1D7b","OPF1D8b","OPF1D9b","OPF1D10b","OPF1D11b",
                                             "OPF1D12b","OPF1D13b","OPF1D14b","OPF1D15b","OPF1D16b","OPF1D17b","OPF1D18b","OPF1D19b","OPF1D20b","OPF1D21b","OPF1D22b",
                                             "OPF1D23b","OPF1D24b","OPF1D25b","OPF1D26b","OPF1D27b","OPF1D28b","OPF1D28APb")) + theme(legend.position = "bottom") + 
                                             scale_fill_manual("Genus", values = cb_palette1) + scale_color_viridis(option = "D") + theme_bw() + theme(axis.text.x = element_blank()) + ggtitle("(A)") + theme(legend.title = element_text(size = 25))

publication_style<- basic + scale_y_continuous(expand=c(0,0)) +
labs(x = "\nDays from harvest",
       y = "Relative abundance")

publication_style

# Making Alpha diversity plots
adiv <- data.frame(
    "Observed" = phyloseq::estimate_richness(ps, measures = "Observed"),
  "Shannon" = phyloseq::estimate_richness(ps, measures = "Shannon"),
  "InvSimpson" = phyloseq::estimate_richness(ps, measures = "InvSimpson"),
  "Location" = phyloseq::sample_data(ps)$Location)
head(adiv)

adiv %>%
  gather(key = metric, value = value, "Shannon") %>%
  mutate(metric = factor(metric, levels = "Shannon")) %>%
  ggplot(aes(x = Location, y = value)) +
  geom_boxplot(outlier.color = NA) +
  geom_jitter(aes(color = Location), height = 0, width = 0.2) +
  labs(x = "", y = "Shannon Index") +
  theme(legend.position="none")

#Extract meta data

ps.meta <- meta(ps)
(head(ps.meta))

#Add the diversity table to metadata
ps.meta$Shannon <- adiv$Shannon 
ps.meta$InverseSimpson <- adiv$InvSimpson
ps.meta$Observed <- adiv$Observed

# create a list of pairwise comaprisons
Ferment_Loc <- levels(ps.meta$Location)
Ferment_Loc <- unique(ps.meta$Location)
print(Ferment_Loc)

# make a pairwise list that we want to compare.
Ferment_Loc.pairs <-  combn(seq_along(Ferment_Loc), 2, simplify = FALSE, FUN = function(i)Ferment_Loc[i])                        
                            
print(Ferment_Loc.pairs)

# Using ggpubr to plot

p1 <- ggboxplot(ps.meta, x = "Location", y = "Shannon",
 , fill = "Location", palette = c("#b2df8a", "#D55E00")) 

Shannon_alpha_diveristy <- p1 + stat_compare_means(comparisons = Ferment_Loc.pairs) 
print(Shannon_alpha_diveristy)

#Wilcoxon test (Shannon)
wilcox.test(Shannon ~ Location, data = adiv, conf.int = TRUE) 

#Run a Shapiro-Wilk test of normality
shapiro.test(alpha.diversity$Shannon)

#Beta-diversity

ord_unifrac <- ordinate(ps_rel_abund, method = "PCoA", distance = "wunifrac") ##Generate distances 
ord_unifrac_un <- ordinate(ps_rel_abund, method = "PCoA", distance = "unifrac") 

anosim(ord_unifrac$values, sample_info_tab$Location, permutations = 1000) ## Apply anosim using weighted unifrac

anosim(ord_unifrac_un$values, sample_info_tab$Location, permutations = 1000) ## Apply anosim using unweighted unifrac

# Getting a visual of beta-diversity using NMDS (A rank based approach)
set.seed(1)
ord.nmds.bray <- ordinate(otu_table(ps_rel_abund), method="NMDS", distance="bray")

# Call NMDS to See stress value. 
ord.nmds.bray

#Actual NMDS plot
P<- plot_ordination(ps_rel_abund, ord.nmds.bray, color="Location", shape = "Ferment_Stage")

#Publication style
xx<- P + geom_point(size=3.5, alpha=0.75) + scale_colour_brewer(type="qual", palette="Set1") + stat_ellipse()

NMDS<- xx + annotate("text", x = -0.9, y= 1.2, label = "Stress = 0.08") + theme(panel.background = element_rect(fill = 'white', colour = 'black')) + 
          + theme(text = element_text(size = 16)) + geom_point(size = 3.5)

#Differential Abundance testing using DESeq2
sample_data(ps)$Location <- as.factor(sample_data(ps)$Location)

ds <- phyloseq_to_deseq2(ps, ~ Location)
ds <-  DESeq(ds)

alpha <- 0.05
res <- results(ds, contrast=c("Location", "Vineyard", "Winery"), alpha=alpha)
res <- res[order(res$padj, na.last=NA), ]
res_sig <- res[(res$padj < alpha), ]
res_sig

res_sig <- cbind(as(res_sig, "data.frame"), as(tax_table(ps)[rownames(res_sig), ], "matrix"))
colnames(res_sig) <- make.unique(names(res_sig))
 ggplot(res_sig, aes(x=Genus, y=log2FoldChange, color=Genus)) +
    geom_jitter(size=3, width = 0.2) +
    theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))

res_sig

write.csv(res_sig,"Deseq2.csv")
